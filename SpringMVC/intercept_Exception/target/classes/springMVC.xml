<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 配置扫描组件 -->
    <context:component-scan base-package="com.mvc"></context:component-scan>

    <!-- 开放静态资源的访问， 静态资源交给默认Servlet处理-->
    <mvc:default-servlet-handler />

    <!-- 配置文件上传解析器，将上传的文件封装为MultipartFile对象，且需要设置ID来定位解析器，且必须为multipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

    <!-- 基于配置异常处理 -->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--                &lt;!&ndash; 运算异常                           key对应的value是error，若没有设置视图名称前缀，就会视图解析器解析，设置了前缀，就会被默认视图解析&ndash;&gt;-->
<!--                <prop key="java.lang.ArithmeticException">error</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--        &lt;!&ndash; 设置将异常信息共享在请求域中的键 &ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="ext"></property>-->
<!--    </bean>-->

    <!--
    配置视图控制器：
    path：设置处理的请求地址
    view-name：设置请求地址所对应的视图名称
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    <!--
    当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需
    要在SpringMVC的核心配置文件中设置   开启mvc注解驱动   的标签：
    -->
    <mvc:annotation-driven />

    <!-- 配置拦截器 以下两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截-->
<!--    <mvc:interceptors>-->
<!--        <bean class="com.mvc.intercept.FirstInterceptor"></bean>-->
<!--        <ref bean="firstInterceptor"></ref>-->
<!--        <ref bean="secondInterceptor"></ref>-->
        <!--
        以下配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过
        mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
        此时，除了 / 的请求，其他请求将全部拦截
        -->
<!--        <mvc:interceptor>-->
<!--            <mvc:mapping path="/**"/>-->
<!--            <mvc:exclude-mapping path="/"/>-->
<!--            <ref bean="firstInterceptor"></ref>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->


    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


</beans>