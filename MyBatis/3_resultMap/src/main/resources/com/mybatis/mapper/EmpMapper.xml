<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis.mapper.EmpMapper">

    <!--
        resultMap：设置自定义映射关系
        id：唯一标识，不能重复
        type：设置映射关系中的实体类类型
        子标签：
            id：设置主键的映射关系
            result：设置普通字段的映射关系
         属性：
            property：设置映射关系中的属性名，必须是type属性所设置的实体类类型中的属性名
            column：设置映射关系中的字段名，必须SQL语句查询出的字段名
    -->
    <resultMap id="empResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
    </resultMap>

    <select id="getAllEmp" resultMap="empResultMap">
        select * from t_emp;
    </select>

    <!-- List<Emp> getAllEmp();-->
    <select id="getAllEmp_Old" resultType="Emp">
        <!-- 当字段名和属性名不同时，可以在SQL中设置别名 或 自定义映射 -->
        <!-- select eid, emp_name as empName, age, sex, email from t_emp; -->
        select * from t_emp;
    </select>




    <!-- 处理多对一映射关系方式一：级联属性赋值 -->
    <resultMap id="empAndDeptResultMap_ONE" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <result property="dept.did" column="did"></result>
        <result property="dept.deptName" column="dept_name"></result>
    </resultMap>
    <!-- 处理多对一映射关系方式二：assocaition -->
    <resultMap id="empAndDeptResultMap_TWO" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--     assocaition：处理多对一的映射关系
                 property：需要处理的属性名
                 javaType：该属性的类型        -->
        <association property="dept" javaType="Dept">
            <id property="did" column="did"></id>
            <result property="deptName" column="dept_name"></result>
        </association>
    </resultMap>
    <!--  Emp getEmpAndDept(@Param("eid") Integer eid); -->
    <select id="getEmpAndDept" resultMap="empAndDeptResultMap_TWO">
        select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #{eid};
    </select>



    <!-- 通过分布查询：查询员工以及员工所对应的部门信息 -->
    <resultMap id="empAndDeptByStepResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--    select：设置分布查询SQL的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）
                column：设置分布查询的条件
                fetchType：当开启了全局的延迟加载后，可通过此属性手动控制延迟加载的效果
                         lazy：表示延迟加载
                         eager：表示立即加载       -->
        <association property="dept"
                     select="com.mybatis.mapper.DeptMapper.getEmpAndDeptByStep_TWO"
                     column="did"
                     fetchType="eager"></association>
    </resultMap>
    <!-- Emp getEmpAndDeptByStep_ONE(@Param("eid") Integer eid); -->
    <select id="getEmpAndDeptByStep_ONE" resultMap="empAndDeptByStepResultMap">
        select * from t_emp where eid = #{eid};
    </select>


    <!-- 根据did查询 对应所有员工信息 -->
    <!-- List<Emp> getDeptAndEmpByStep_TWO(@Param("did") Integer did); -->
    <select id="getDeptAndEmpByStep_TWO" resultType="Emp">
        select * from t_emp where did = #{did};
    </select>


</mapper>
